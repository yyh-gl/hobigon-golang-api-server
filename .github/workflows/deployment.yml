name: Deployment

on:
  push:
    tags:
      - 'v[1-9]+.[0-9]+.[0-9]+'

jobs:
  create_release_note:
    name: Create release note
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Make release note
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_container_image:
    name: Publish container image
    runs-on: ubuntu-latest
    needs: create_release_note
    steps:
      - name: Set TAG environment
        run: echo "TAG=${{ secrets.CONTAINER_REGISTORY }}/${{ github.repository }}/prd/hobigon-api:latest" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTORY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GCR_PERSONAL_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/rest/Dockerfile
          push: true
          tags: ${{ env.TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: make build-all
      - uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: |
            ./cmd/rest/bin/api-server
            ./cmd/cli/bin/hobi
            ./cmd/graphql/bin/graphql-server
          retention-days: 1
          if-no-files-found: error

  deploy_to_gce:
    name: Deploy to GCE
    runs-on: ubuntu-latest
    needs: [create_release_note, build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: binaries
          path: cmd
      - name: Deploy
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: cmd
          target: api-server-golang
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          config: ${{ secrets.SSH_CONFIG }}
      - name: Restart server
        run: |
          ssh hobigon sudo chmod +x /home/Y_h/api-server-golang/cmd/{cli,graphql,rest}/bin/*
          ssh hobigon sudo systemctl restart api-server-golang.service

  success_notification:
    name: Success notification
    needs: [publish_container_image, deploy_to_gce]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: rtCamp/action-slack-notify@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_50 }}
          SLACK_TITLE: CD Success
        if: env.WORKFLOW_CONCLUSION == 'success'

  failure_notification:
    name: Failure notification
    needs: [publish_container_image, deploy_to_gce]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: rtCamp/action-slack-notify@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_50 }}
          SLACK_TITLE: CD Failure
          SLACK_COLOR: danger
        if: env.WORKFLOW_CONCLUSION == 'failure'
